var kotlin_coroutines = "1.8.0"

buildscript {
    ext.kotlin_version = "1.9.22"
    repositories {mavenCentral()}
    dependencies {classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"}
}
buildscript {
    repositories {gradlePluginPortal()}
    dependencies {classpath 'com.github.johnrengelman:shadow:8.1.1'}
}

group = 'cz.coffeerequired'
version = '1.0'

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'kotlin'

repositories {
    mavenCentral()
    // Paper
    maven { url "https://repo.papermc.io/repository/maven-public/" }
    // Skript
    maven { url 'https://repo.skriptlang.org/releases' }
}
tasks.register('copyJar', Copy) {
    from './build/libs'
    into "E:/Git/mc_server/plugins"
    include "*-all.jar"
    rename { String fileName -> return "skript-mail.jar"}
}

build {
    dependsOn(shadowJar)
    tasks.withType(JavaCompile).tap {
        configureEach {
            options.compilerArgs.add("-Xlint:unchecked")
            options.compilerArgs.add("-Xlint:deprecation")
        }
    }
}


dependencies {
    /* Annotation */ compileOnly("org.eclipse.jdt:org.eclipse.jdt.annotation:2.0.0")
    /* Paper */ compileOnly(group: 'io.papermc.paper', name: 'paper-api', version: '1.20.4-R0.1-SNAPSHOT')

    /* Skript */ compileOnly(group: 'com.github.SkriptLang', name: 'Skript', version: '2.8.2') { transitive = false}
    compileOnly group: 'com.sun.activation', name: 'jakarta.activation', version: '2.0.1'
    compileOnly group: 'com.sun.mail', name: 'jakarta.mail', version: '2.0.1'
    compileOnly group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '4.0.1'
    compileOnly group: 'com.sanctionco.jmail', name: 'jmail', version: '1.6.2'
    compileOnly group: 'com.pivovarit', name: 'throwing-function', version: '1.5.1'
    compileOnly group: 'org.eclipse.angus', name: 'angus-mail', version: '2.0.2'
    compileOnly("org.simplejavamail:simple-java-mail:8.6.3")
    compileOnly("org.simplejavamail:core-module:8.6.3")
    compileOnly("org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines")
}


shadowJar {
    minimize()
    dependencies {
        exclude dependency("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")
    }

//    relocate('kotlin', 'cz.coffeerequired.api.kotlin')
//    relocate('kotlinx', 'cz.coffeerequired.api.kotlinx')
}.finalizedBy(copyJar)

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version, kotlin_coroutines: kotlin_coroutines, kotlin_version: kotlin_version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching(['plugin.yml', 'lang/default.lang']) {
        expand props
    }
}